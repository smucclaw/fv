# Run with: nunchaku professional_conduct_rule_34.nun

val obj : type.

### Unary predicates
val pIncompatibleDignity : obj -> prop.
val pSingaporeBased : obj -> prop.

# Activity
val pBusiness : obj -> prop.
val pJointLawVenture : obj -> prop.
val pExecutiveAppointment : obj -> prop.
val pLawRelatedService : obj -> prop.

# Organization
val pBusinessEntity : obj -> prop.
val pInstitution : obj -> prop.
val pLawPractice : obj -> prop.

# Person
val pLegalPractitioner : obj -> prop.
val pLocumSolicitor : obj -> prop.


### Binary predicates
val pAssociatedWith : obj -> obj -> prop.

# 34_1
val pInterferesWithPrimaryOccupationLawyer : obj -> obj -> prop.
val pInterferesWithAvailability : obj -> obj -> prop.
val pInterferesWithRepresentationClient : obj -> obj -> prop.
val pUnfairlyAttractBusiness : obj -> prop.
val pPaymentOfFeeToFor : obj -> obj -> prop.
val pUnauthorised : obj -> obj -> prop.

# 34_2
val pLPRMainEmployment : obj -> obj -> prop.
val pLPRRelatedEmployment : obj -> obj -> prop.
val pLegalOwner : obj -> obj -> prop.
val pBeneficialOwner : obj -> obj -> prop.
val pSoleProprietor : obj -> obj -> prop.
val pPartner : obj -> obj -> prop.
val pDirector : obj -> obj -> prop.
val pRepresentative : obj -> obj -> obj -> obj -> prop.
val pMustNotInvolvement34_2_b : obj -> obj -> prop.

# 34_3
val pProvides : obj -> obj -> prop.

# 34_4
val pConditionsSecondSchedule : obj -> obj -> prop.

# 34_6
val pExecAppointmentOtherSGLawPractice_34_6a : obj -> obj -> prop.
val pExecAppointmentBSE_34_6b : obj -> obj -> prop.

goal

# Condition for: Must not accept

let pMustNotAcceptApp_34_1_without_b := fun Vlpr Vapp.
    ((exists Vbsn. pAssociatedWith Vapp Vbsn && pIncompatibleDignity Vbsn)
  || (exists Vbsn. pAssociatedWith Vapp Vbsn && pUnfairlyAttractBusiness Vbsn)
  || (exists Vbsn Vprs. pAssociatedWith Vapp Vbsn && pPaymentOfFeeToFor Vprs Vbsn && pUnauthorised Vprs Vbsn))
in

let pMustNotAcceptApp_34_1_b := fun Vlpr Vapp.
    (exists Vbsn. pAssociatedWith Vapp Vbsn &&
          (pInterferesWithPrimaryOccupationLawyer Vbsn Vlpr ||
           pInterferesWithAvailability Vbsn Vlpr ||
           pInterferesWithRepresentationClient Vbsn Vlpr))
in

let pMustNotAcceptApp_34_1 := fun Vlpr Vapp.
    (pMustNotAcceptApp_34_1_without_b Vlpr Vapp || pMustNotAcceptApp_34_1_b Vlpr Vapp)
in

# Conditions for: May accept

let pConnectedAccording34_2 := fun Vlpr Vrpr Vmpr Vapp.
   (  pLPRMainEmployment Vlpr Vmpr &&
      pLPRRelatedEmployment Vlpr Vrpr &&
      (forall Vown. pLegalOwner Vown Vrpr || pBeneficialOwner Vown Vrpr
                => pSoleProprietor Vown Vmpr || pPartner Vown Vmpr || pDirector Vown Vmpr)
   || (pRepresentative Vlpr Vapp Vmpr Vrpr && pMustNotInvolvement34_2_b Vmpr Vrpr)
   )
in

let pMayAcceptApp_34_2 := fun Vlpr Vapp.
   (~ pMustNotAcceptApp_34_1 Vlpr Vapp &&
   (exists Vrpr Vmpr. pLawPractice Vrpr && pLawPractice Vmpr && 
    (
     pAssociatedWith Vapp Vrpr &&
     pConnectedAccording34_2 Vlpr Vrpr Vmpr Vapp &&
     pSingaporeBased Vrpr &&
     pSingaporeBased Vmpr
    )
   ))
in

let pMayAcceptApp_34_3 := fun Vlpr Vapp.
   (~ pMustNotAcceptApp_34_1 Vlpr Vapp &&
    (exists Vbse Vsrv. pBusinessEntity Vbse && pLawRelatedService Vsrv && 
     pProvides Vbse Vsrv && pAssociatedWith Vapp Vbse)
   )
in

let pMayAcceptApp_34_4 := fun Vlpr Vapp.
   (~ pMustNotAcceptApp_34_1 Vlpr Vapp &&
    ~ pLocumSolicitor Vlpr &&
    (forall Vbse. pBusinessEntity Vbse =>
                  pAssociatedWith Vapp Vbse => 
                  ~ (exists Vsrv. pLawRelatedService Vsrv && pProvides Vbse Vsrv) &&
                  pConditionsSecondSchedule Vlpr Vbse)
   )
in

## difference wrt file professional_conduct_rule_34_unsat.nun:
# used pMustNotAcceptApp_34_1_without_b there and pMustNotAcceptApp_34_1 here
let pMayAcceptApp_34_5 := fun Vlpr Vapp.
    (~ pMustNotAcceptApp_34_1 Vlpr Vapp &&
     pLocumSolicitor Vlpr &&    
    (forall Vbse. pBusinessEntity Vbse =>
                  pAssociatedWith Vapp Vbse => 
                  ~ (exists Vsrv. pLawRelatedService Vsrv && pProvides Vbse Vsrv) &&
                  pConditionsSecondSchedule Vlpr Vbse)
   )
in

let pMayAcceptApp := fun Vlpr Vapp. 
     (pMayAcceptApp_34_2 Vlpr Vapp || 
      pMayAcceptApp_34_3 Vlpr Vapp || 
      pMayAcceptApp_34_4 Vlpr Vapp ||
      pMayAcceptApp_34_5 Vlpr Vapp
     )
in


# Condition for: Must not accept

let pMustNotAcceptApp_34_6 := fun Vlpr Vapp.
    ((
        ~ pMayAcceptApp_34_2 Vlpr Vapp &&
        ~ pMayAcceptApp_34_3 Vlpr Vapp &&
        ~ pMayAcceptApp_34_4 Vlpr Vapp &&
        ~ pMayAcceptApp_34_5 Vlpr Vapp 
       ) &&
       (pExecAppointmentOtherSGLawPractice_34_6a Vlpr Vapp ||
        pExecAppointmentBSE_34_6b Vlpr Vapp 
       )
     )
in

let pMustNotAcceptApp := fun Vlpr Vapp. 
     (pMustNotAcceptApp_34_1 Vlpr Vapp || pMustNotAcceptApp_34_6 Vlpr Vapp)
in


# Check condition:
# "may accept" and "must not accept" are exhaustive (one or the other applies and nothing else).
# Hence, (forall ...) should be valid and the negation ~(...) should be unsatisfiable.
# Result: But this is not the case, a countermodel is found
# ~ (forall Vlpr Vapp . (pMayAcceptApp Vlpr Vapp || pMustNotAcceptApp Vlpr Vapp)).

# Check condition:
# "may accept" and "must not accept" are mutually exclusive 
# Hence, (forall ...) should be valid and the negation ~(...) should be unsatisfiable.
# Result: But this is not the case, a countermodel is found
 ~ (forall Vlpr Vapp .
    pLegalPractitioner Vlpr =>
    pExecutiveAppointment Vapp =>
    ~ (pMayAcceptApp Vlpr Vapp && pMustNotAcceptApp Vlpr Vapp)).

# Check condition expressed by rule 34_7:
# it is consistent to assume that a practictioner may accept an appointment in an institution.
# Result: indeed, a satisfying assignment is found for the following:
# (forall Vlpr Vapp Vins. pAssociatedWith Vlpr Vins && pInstitution Vins && pMayAcceptApp Vlpr Vapp).

