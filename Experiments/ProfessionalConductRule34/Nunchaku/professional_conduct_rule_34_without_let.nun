# Run with: nunchaku professional_conduct_rule_34_without_let.nun

val obj : type.

### Unary predicates
val IncompatibleDignity : obj -> prop.
val SingaporeBased : obj -> prop.

# Activity
val Business : obj -> prop.
val JointLawVenture : obj -> prop.
val ExecutiveAppointment : obj -> prop.
val LawRelatedService : obj -> prop.

# Organization
val BusinessEntity : obj -> prop.
val Institution : obj -> prop.
val LawPractice : obj -> prop.

# Person
val LegalPractitioner : obj -> prop.
val LocumSolicitor : obj -> prop.


### Binary predicates

# 34_1
val AssociatedWith : obj -> obj -> prop. # executive appointment associated with business or business entity or institution
val InterferesWithPrimaryOccupationLawyer : obj -> obj -> prop.
val InterferesWithAvailability : obj -> obj -> prop.
val InterferesWithRepresentationClient : obj -> obj -> prop.
val UnfairlyAttractBusiness : obj -> prop.
val PaymentOfFeeToFor : obj -> obj -> prop.
val Unauthorised : obj -> obj -> prop.

# 34_2
val LPRMainEmployment : obj -> obj -> prop.
val LPRRelatedEmployment : obj -> obj -> prop.
val LegalOwner : obj -> obj -> prop.
val BeneficialOwner : obj -> obj -> prop.
val SoleProprietor : obj -> obj -> prop.
val Partner : obj -> obj -> prop.
val Director : obj -> obj -> prop.
val Representative : obj -> obj -> obj -> obj -> prop.
val MustNotInvolvement34_2_b : obj -> obj -> prop.

# 34_3
val Provides : obj -> obj -> prop.

# 34_4
val ConditionsSecondSchedule : obj -> obj -> prop.

# 34_6
val ExecAppointmentOtherSGLawPractice_34_6a : obj -> obj -> prop.
val ExecAppointmentBSE_34_6b : obj -> prop.

# Declarations for deriving specific models

val app1 : obj.
val bsn1 : obj.
val lpr1 : obj.
val srv1 : obj.


# Declaration of functions that were previously defined with a let
val MustNotAcceptApp_34_1_without_b : obj -> obj -> prop.
val MayAcceptApp_34_5 : obj -> obj -> prop.
val MustNotAcceptApp_34_1_b : obj -> obj -> prop.
val MustNotAcceptApp_34_1 : obj -> obj -> prop.
val ConnectedAccording34_2 : obj -> obj -> obj -> obj -> prop.
val MayAcceptApp_34_2 : obj -> obj -> prop.
val MayAcceptApp_34_3 : obj -> obj -> prop.
val MayAcceptApp_34_4 : obj -> obj -> prop.
val MayAcceptApp : obj -> obj -> prop.
val MustNotAcceptApp_34_6 : obj -> obj -> prop.
val MustNotAcceptApp : obj -> obj -> prop.

goal

## Domain model

(forall prs. LocumSolicitor prs => LegalPractitioner prs) &&

# top-level domains different from LegalPractitioner
# NB: explicit typing possible
(forall (x : obj). ~ (ExecutiveAppointment x && LegalPractitioner x)) &&
(forall x. ~ (Business x && LegalPractitioner x)) &&
(forall x. ~ (BusinessEntity x && LegalPractitioner x)) &&
(forall x. ~ (LawRelatedService x && LegalPractitioner x)) &&

# top-level domains different from ExecutiveAppointment
(forall x. ~ (Business x && ExecutiveAppointment x)) &&
(forall x. ~ (BusinessEntity x && ExecutiveAppointment x)) &&
(forall x. ~ (LawRelatedService x && ExecutiveAppointment x)) &&

## translation of the rules and statement of the goal
(forall lpr app. MustNotAcceptApp_34_1_without_b lpr app =
    ((exists bsn. AssociatedWith app bsn && IncompatibleDignity bsn)
  || (exists bsn. AssociatedWith app bsn && UnfairlyAttractBusiness bsn)
  || (exists bsn prs. AssociatedWith app bsn && PaymentOfFeeToFor prs bsn && Unauthorised prs bsn))
)
&&
(
forall lpr app. MayAcceptApp_34_5 lpr app =
    (~ MustNotAcceptApp_34_1_without_b lpr app &&
     LocumSolicitor lpr &&    
    (forall bse. BusinessEntity bse =>
                  AssociatedWith app bse => 
                  ~ (exists srv. LawRelatedService srv && Provides bse srv) &&
                  ConditionsSecondSchedule lpr bse)
   )
)
&&
(
forall lpr app. MustNotAcceptApp_34_1_b lpr app = 
    (~ MayAcceptApp_34_5 lpr app &&
    (exists bsn. AssociatedWith app bsn &&
          (InterferesWithPrimaryOccupationLawyer bsn lpr ||
           InterferesWithAvailability bsn lpr ||
           InterferesWithRepresentationClient bsn lpr)))
)
&&
(
forall lpr app. MustNotAcceptApp_34_1 lpr app = 
    (MustNotAcceptApp_34_1_without_b lpr app || MustNotAcceptApp_34_1_b lpr app)
)
&&
(
# Conditions for: May accept

forall lpr rpr mpr app. ConnectedAccording34_2 lpr rpr mpr app =
   (  LPRMainEmployment lpr mpr &&
      LPRRelatedEmployment lpr rpr &&
      (forall own. LegalOwner own rpr || BeneficialOwner own rpr
                => SoleProprietor own mpr || Partner own mpr || Director own mpr)
   || (Representative lpr app mpr rpr && MustNotInvolvement34_2_b mpr rpr)
   )
)
&&
(
forall lpr app. MayAcceptApp_34_2 lpr app = 
   (~ MustNotAcceptApp_34_1 lpr app &&
   (exists rpr mpr. LawPractice rpr && LawPractice mpr && 
    (
     AssociatedWith app rpr &&
     ConnectedAccording34_2 lpr rpr mpr app &&
     SingaporeBased rpr &&
     SingaporeBased mpr
    )
   ))
)
&&
(
forall lpr app. MayAcceptApp_34_3 lpr app =
   (~ MustNotAcceptApp_34_1 lpr app &&
    (exists bse srv. BusinessEntity bse && LawRelatedService srv && 
     Provides bse srv && AssociatedWith app bse)
   )
)
&&
(
forall lpr app. MayAcceptApp_34_4 lpr app =
   (~ MustNotAcceptApp_34_1 lpr app &&
    ~ LocumSolicitor lpr &&
    (forall bse. BusinessEntity bse =>
                  AssociatedWith app bse => 
                  ~ (exists srv. LawRelatedService srv && Provides bse srv) &&
                  ConditionsSecondSchedule lpr bse)
   )
)
&&
(
forall lpr app. MayAcceptApp lpr app =
     (MayAcceptApp_34_2 lpr app || 
      MayAcceptApp_34_3 lpr app || 
      MayAcceptApp_34_4 lpr app ||
      MayAcceptApp_34_5 lpr app
     )
)

&&
# Condition for: Must not accept


(
forall app. ExecAppointmentBSE_34_6b app =
   (exists bse. BusinessEntity bse && AssociatedWith app bse)
)
&&

(
forall lpr app. MustNotAcceptApp_34_6 lpr app =
    ((
        ~ MayAcceptApp_34_2 lpr app &&
        ~ MayAcceptApp_34_3 lpr app &&
        ~ MayAcceptApp_34_4 lpr app &&
        ~ MayAcceptApp_34_5 lpr app 
       ) &&
       (ExecAppointmentOtherSGLawPractice_34_6a lpr app ||
        ExecAppointmentBSE_34_6b app 
       )
     )
)
&&
(
forall lpr app. MustNotAcceptApp lpr app =
     (MustNotAcceptApp_34_1 lpr app || MustNotAcceptApp_34_6 lpr app)
)
&&

(

# Check condition:
# "may accept" and "must not accept" are exhaustive (one or the other applies and nothing else).
# Hence, (forall ...) should be valid and the negation ~(...) should be unsatisfiable.
# Result: But this is not the case, a countermodel is found
# Now: UNSAT
( ~ (forall lpr app. 
     LegalPractitioner lpr =>
     ExecutiveAppointment app =>
     (MayAcceptApp lpr app || MustNotAcceptApp lpr app))
)

# Check condition:
# It is consistent to assume that there is acceptable behaviour. Result: SAT
# (exists lpr app. LegalPractitioner lpr && ExecutiveAppointment app && MayAcceptApp lpr app)

# It is consistent to assume that there is inacceptable behaviour. Result: SAT
# (exists lpr app. LegalPractitioner lpr && ExecutiveAppointment app && MustNotAcceptApp lpr app)



# Check condition:
# "may accept" and "must not accept" are mutually exclusive 
# Hence, (forall ...) should be valid and the negation ~(...) should be unsatisfiable.
# Result: UNSAT, so "may accept" and "must not accept" are indeed mutually exclusive.
# (
#   ~ (forall lpr app .
#      LegalPractitioner lpr =>
#      ExecutiveAppointment app =>
#      ~ (MayAcceptApp lpr app && MustNotAcceptApp lpr app))
# )

# Check condition expressed by rule 34_7:
# it is consistent to assume that a practictioner may accept an appointment in an institution.
# Result: indeed, a satisfying assignment is found for the following:
# (exists lpr app ins.
#       LegalPractitioner lpr &&
#       ExecutiveAppointment app && 
#       Institution ins && 
#       AssociatedWith app ins && MayAcceptApp lpr app
# )

# Regarding condition expressed by rule 34_8: The notion of formation of an
# entity is not part of the defined terms of this set of rules. One could
# however prove that the inexistence of a related law practice would be
# compatible with the rule set.


# ~ (app1 = bsn1) && ~ (app1 = lpr1) && ~ (app1 = srv1) &&
# ~ (bsn1 = lpr1) && ~ (bsn1 = srv1) &&
# ~ (lpr1 = srv1) &&
# ExecutiveAppointment app1 &&
# BusinessEntity bsn1 &&
# LegalPractitioner lpr1 && ~ LocumSolicitor lpr1 &&
# LawRelatedService srv1 &&
# AssociatedWith lpr1 app1 &&
# Provides bsn1 srv1 &&
# ~ MayAcceptApp lpr1 app1 &&
# ~ MustNotAcceptApp lpr1 app1


).


